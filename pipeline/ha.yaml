jobs:
- job: HA
  pool:
    vmImage: 'Ubuntu-20.04'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: iofogctl
      downloadPath: $(System.DefaultWorkingDirectory)
  - script: |
      sudo cp iofogctl/build_linux_linux_amd64/iofogctl /usr/local/bin/
      sudo chmod 0755 /usr/local/bin/iofogctl
  - template: steps/postinstall.yaml
  - template: steps/init-ssh.yaml
  - template: steps/init-vms.yaml
    parameters:
      id: $(jobuuid)
      distro: $(gcp.vm.distro.xenial)
      repo: $(gcp.vm.repo.ubuntu)
      agent_count: 2
      controller_count: 0
  - script: |
      set -e
      keyFilePath="$(Agent.TempDirectory)/azure-gcp.json"
      
      # Install gcloud-auth-plugin
      echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl -f https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
      
      gcloud components list
      
      gcloud --quiet auth activate-service-account --key-file="${keyFilePath}"
      gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
    displayName: 'Connect to cluster'
  - template: steps/configure-remote-tests.yaml
  - script: |
      sed -i "s|DB_PROVIDER=.*|DB_PROVIDER=\"postgres\"|g" test/env.sh
      sed -i "s|DB_USER=.*|DB_USER=\"$(db.user)\"|g" test/env.sh
      sed -i "s|DB_HOST=.*|DB_HOST=\"postgres-postgresql.postgres.svc.cluster.local\"|g" test/env.sh
      sed -i "s|DB_PORT=.*|DB_PORT=5432|g" test/env.sh
      sed -i "s|DB_PW=.*|DB_PW=\"$(db.pw)\"|g" test/env.sh
      sed -i "s|DB_NAME=.*|DB_NAME=\"iofog$(jobuuid)\"|g" test/env.sh
      sed -i "s|CONTROLLER_IMAGE=.*|CONTROLLER_IMAGE=\"$(enterprise_image)\"|g" test/env.sh
      cp test/env.sh test/conf
      cat test/conf/env.sh
    displayName: 'Set up Postgres on K8s cluster'
  - template: steps/install-test-deps.yaml
  - script: |
      set -o pipefail
      test/run.bash ha | tee test/conf/results-ha.tap
    displayName: 'Run Functional Tests'
  - script: |
      tap-junit -i test/conf/results-ha.tap -o test/conf -s HA -n results-ha.xml || true
    displayName: 'Convert test output from TAP to JUnit'
    condition: succeededOrFailed()
  - script: |
        test/clean.bash
    displayName: 'Clean K8s Cluster'
    condition: always()
  - template: steps/functional-post-test.yaml
  - template: steps/functional-clean-vm.yaml
    parameters:
      id: $(jobuuid)
      agent_count: 2
      controller_count: 0
