parameters:
  id: ''
  distro: ''
  repo: ''
  agent_count: 1
  controller_count: 1
  windows: 'false'

steps:
- template: init-gcloud-steps.yaml
  parameters:
    windows: ${{ parameters.windows }}
- bash: |
    id=${{ parameters.id }}
    distro=${{ parameters.distro }}
    repo=${{ parameters.repo }}
    agent_count=${{ parameters.agent_count }}
    controller_count=${{ parameters.controller_count }}
    agent_list=""
    jobs=0

    echo "vms: $distro $repo"

    for idx in $(seq 1 $agent_count); do
      gcloud compute --project=$(gcp.project.name) instances create iofogctl-ci-$id-$idx --zone=$(gcp.vm.zone) --machine-type=n1-standard-1 --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=$(gcp.svcacc.name) --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=$distro --image-project=$repo --boot-disk-size=200GB --boot-disk-type=pd-standard --boot-disk-device-name=iofogctl-ci-$id-$idx &
      ((jobs++))
    done
    if [ $controller_count -gt 0 ]; then
      idx=$((agent_count+1))
      gcloud compute --project=$(gcp.project.name) instances create iofogctl-ci-$id-$idx --zone=$(gcp.vm.zone) --machine-type=n1-standard-1 --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=$(gcp.svcacc.name) --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=$distro --image-project=$repo --boot-disk-size=200GB --boot-disk-type=pd-standard --boot-disk-device-name=iofogctl-ci-$id-$idx &
      ((jobs++))
    fi

    for job in $(seq -s ' ' 1 $jobs); do
      wait %$job
    done

    for idx in $(seq 1 $agent_count); do
      vm_host=$(gcloud compute instances list | grep iofogctl-ci-$id-$idx | awk '{print $5}')
      agent_list="$(gcp.vm.user)@$vm_host $agent_list"
    done
    agent_list=$(echo "$agent_list" | awk '{$1=$1;print}')
    echo "##vso[task.setvariable variable=agent_vm_list]$agent_list"
    if [ $controller_count -gt 0 ]; then
      idx=$((agent_count+1))
      vm_host=$(gcloud compute instances list | grep iofogctl-ci-$id-$idx | awk '{print $5}')
      echo "##vso[task.setvariable variable=controller_vm]$(gcp.vm.user)@$vm_host"
    fi
  displayName: 'Deploy Test VMs'
- bash: |
    controller_count=${{ parameters.controller_count }}
    keyFilePath="$(Agent.TempDirectory)/id_rsa"
    if [[ ${{ parameters.windows }} == "true" ]]; then
      keyFilePath=$(wslpath "${keyFilePath}")
    fi
    cat $keyFilePath > /tmp/id_rsa
    chmod 400 /tmp/id_rsa
    cssh='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/id_rsa'
    for agent in $(agent_vm_list); do
      echo "Waiting for VM $agent"
      iter=0
      while ! $cssh $agent -- echo "SSH success" && [ $iter -lt 15 ]; do
        ((iter++))
        sleep 5
      done
      if [ ! $iter -lt 15 ]; then
        echo "Timed out waiting for $agent"
        exit 1
      fi
    done
    if [ $controller_count -gt 0 ]; then
      echo "Waiting for VM $(controller_vm)"
      iter=0
      while ! $cssh $(controller_vm) -- echo "SSH success" && [ $iter -lt 15 ]; do
        ((iter++))
        sleep 5
      done
      if [ ! $iter -lt 15 ]; then
        echo "Timed out waiting for $(controller_vm)"
        exit 1
      fi
    fi
  displayName: 'Wait for VM SSH access'