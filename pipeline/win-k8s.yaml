jobs:
- job: Windows_K8s
  pool: 'Azure Windows'
  steps:
  - bash: |
      rm -rf /mnt/c/Users/$(azure.windows.user)/.iofog/
    displayName: 'Clean up Windows env'
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: iofogctl
      downloadPath: $(System.DefaultWorkingDirectory)
  - bash: |
      dir=$(wslpath "C:\Users\$(azure.windows.user)\AppData\Local\Microsoft\WindowsApps")
      echo moving
      mv windows/iofogctl $dir/

      echo chmodding
      chmod +x $dir/iofogctl

      echo version
      $dir/iofogctl version
      iofogctl version
    displayName: 'Prepare iofogctl binary'
  - bash: |
      tempBashPath=$(wslpath "$(Agent.TempDirectory)")
      cd $tempBashPath
      git clone https://github.com/bats-core/bats-core.git && cd bats-core && git checkout tags/v1.1.0 && ./install.sh /usr
      bats --version
    displayName: 'Install Bats'
  - bash: |
      for suffix in bash sh bats; do
        for file in $(find ./test -name "*.$suffix"); do
          dos2unix -o $file
        done
      done
      for file in $(find ./assets/agent -name '*.sh'); do dos2unix -o $file; done
    displayName: 'Format test files'
  - template: steps/init-ssh.yaml
  - template: steps/init-vms.yaml
    parameters:
      id: wink8s$(build)
      distro: $(gcp.vm.distro.xenial)
      repo: $(gcp.vm.repo.ubuntu)
      agent_count: 2
      controller_count: 0
      windows: 'true'
  - template: steps/configure-remote-tests.yaml
    parameters:
      windows: 'true'
  - task: DownloadSecureFile@1
    displayName: 'Download SSH keys to'
    name: 'gcp_iofogctl_rsa'
    inputs:
      secureFile: 'gcp_iofogctl_rsa'
  - bash: |
      destFolder=$(wslpath "$(windows_ssh_key_path)")
      echo "SSH downloaded at $(gcp_iofogctl_rsa.secureFilePath)"
      echo "Converting windows path to bash path"
      bashPath=$(wslpath "$(gcp_iofogctl_rsa.secureFilePath)")
      echo "Bash path = $bashPath"
      ls $bashPath
      mkdir -p $destFolder
      cp $bashPath $destFolder/$(ssh_key_file)
      echo "Copied SSH fey from $bashPath to $destFolder"
      chmod 0700 $destFolder
      chmod 0600 $destFolder/$(ssh_key_file)
      echo '' > $destFolder/known_hosts
      ls -la $destFolder
    displayName: Prepare SSH key
  - bash: |
      sudo apt-get install -y jq
    displayName: 'Install jq'
  - bash: |
      sed -i "s|KEY_FILE=.*|KEY_FILE=\"$(windows_ssh_key_path)/$(ssh_key_file)\"|g" test/conf/env.sh
      sed -i "s|KUBE_CONFIG=.*|KUBE_CONFIG=\"$(windows_kube_config_path)\"|g" test/conf/env.sh
      sed -i "s|TEST_KUBE_CONFIG=.*|TEST_KUBE_CONFIG=\"$(bash_kube_config_path)\"|g" test/conf/env.sh
      cat test/conf/env.sh
    displayName: 'Prepare Test Config'
  - bash: |
      kubePath=$(wslpath "C:\Users\$(azure.windows.user)\.kube\config")
      export KUBECONFIG="$kubePath"
      gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
      gcloudPath="C:\\\Program Files (x86)\\\Google\\\Cloud SDK\\\google-cloud-sdk\\\bin\\\gcloud"
      sed -i "s|cmd-path:.*|cmd-path: $gcloudPath|g" $kubePath
    displayName: 'Connect to cluster'
  - bash: |
      set -o pipefail
      export WSL_KEY_FILE=$(wslpath "$(windows_ssh_key_path)/$(ssh_key_file)")
      echo $WSL_KEY_FILE
      test/run.bash k8s | tee test/conf/results-k8s.tap
    displayName: 'Run Functional Tests'
  - bash: |
      tap-junit -i test/conf/results-k8s.tap -o test/conf -s K8s -n results-k8s.xml || true
    displayName: 'Convert test output from TAP to JUnit'
    condition: succeededOrFailed()
  - bash: |
        test/clean.bash
    displayName: 'Clean K8s Cluster'
    condition: always()
  - template: steps/functional-post-test.yaml
  - template: steps/functional-clean-vm.yaml
    parameters:
      id: wink8s$(build)
      agent_count: 2
      controller_count: 0